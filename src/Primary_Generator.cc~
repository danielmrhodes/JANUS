#include "Primary_Generator.hh"
#include "Gamma_Decay.hh"

#include "G4GenericIon.hh"
#include "G4Gamma.hh"

#include "G4RandomDirection.hh"

#include "G4ProcessManager.hh"
#include "G4IonTable.hh"
#include "G4Decay.hh"
#include "G4DecayTable.hh"

#include "G4SystemOfUnits.hh"
#include "G4UnitsTable.hh"
#include "G4PhysicalConstants.hh"

Primary_Generator::Primary_Generator() {

  messenger = new Primary_Generator_Messenger(this);
  gun = new G4ParticleGun(1);
  reac = new Reaction();
  
  beam_def = NULL;
  recoil_def = NULL;

  beam_X = 0.0*mm;
  beam_Y = 0.0*mm;
  beam_AX = 0.0*rad;
  beam_AY = 0.0*rad;
  beam_En = 0.0*MeV;
  
  sigma_X = 0.0*mm;
  sigma_Y = 0.0*mm;
  sigma_AX = 0.0*rad;
  sigma_AY = 0.0*rad;
  sigma_En = 0.0*MeV;

  source_En = 0.0*MeV;
  
}

Primary_Generator::~Primary_Generator() {
  
  delete gun;
  delete messenger;
  delete reac;
  
}

void Primary_Generator::GeneratePrimaries(G4Event* evt) {
  
  switch(mode) {
    
    case MODE::Scattering: {
  
      //G4double th = 75.71*deg;
      //G4double th = 165.0*deg;
      G4double th = reac->SampleRutherfordCM();
      G4double ex = 0.0*MeV; //reac->ChooseExcitation(th);

      //Randomize incoming beam energy using energy distribution
      G4double en = G4RandGauss::shoot(beam_En,sigma_En);

      //Reaction position
      //Randomize using X and Y distributions
      G4ThreeVector pos = G4ThreeVector(G4RandGauss::shoot(beam_X,sigma_X),
  				        G4RandGauss::shoot(beam_Y,sigma_Y),
				        0*nm); //middle of target
  
      //Outgoing vectors
      G4ThreeVector bdir = G4ThreeVector(0,0,1); //projectile direction
      bdir.setTheta(reac->Theta_LAB(th,en,ex)); //theta from kinematics
      bdir.setPhi(G4RandFlat::shoot(-pi,pi)); //randomly choose phi

      G4ThreeVector rdir = G4ThreeVector(0,0,1); //recoil direction
      rdir.setTheta(reac->Recoil_Theta_LAB(th,en,ex)); //theta from kinematics
      rdir.setPhi(bdir.phi()-pi); //Particles emerge back-to-back in LAB frame
  
      //Randomize direction using angle distributions
      G4double ax = G4RandGauss::shoot(beam_AX,sigma_AX);
      G4double ay = G4RandGauss::shoot(beam_AY,sigma_AY);
  
      bdir.rotateX(ax);
      bdir.rotateY(ay);
      rdir.rotateX(ax);
      rdir.rotateY(ay);
  
      //Beam vertex
      gun->SetParticleDefinition(beam_def);
      gun->SetParticleEnergy(reac->KE_LAB(th,en,ex));
      gun->SetParticlePosition(pos);
      gun->SetParticleMomentumDirection(bdir);
      gun->GeneratePrimaryVertex(evt);
  
      //Recoil vertex
      gun->SetParticleDefinition(recoil_def);
      gun->SetParticleEnergy(reac->Recoil_KE_LAB(th,en,ex));
      gun->SetParticlePosition(pos);
      gun->SetParticleMomentumDirection(rdir);
      gun->GeneratePrimaryVertex(evt);

      break;
  
    }

    case MODE::Source: {
      
      gun->SetParticleMomentumDirection(G4RandomDirection());
      gun->GeneratePrimaryVertex(evt);

      break;
    }

    case MODE::Full: { 
      
      gun->SetParticleMomentumDirection(G4RandomDirection());
      gun->GeneratePrimaryVertex(evt);
      
      break;
    }

  }

  return;
  
}

void Primary_Generator::Update() {

  switch(mode) {

    case MODE::Scattering: {
  
      G4IonTable* table = (G4IonTable*)(G4ParticleTable::GetParticleTable()->GetIonTable());
      beam_def = table->GetIon(reac->GetBeamZ(),reac->GetBeamA(),0.0*MeV);
      recoil_def = table->GetIon(reac->GetRecoilZ(),reac->GetRecoilA(),0.0*MeV);

      beam_def->SetPDGStable(true);
      recoil_def->SetPDGStable(true);

      reac->SetBeamMass(beam_def->GetPDGMass());
      reac->SetRecoilMass(recoil_def->GetPDGMass());
  
      reac->ConstructRutherfordCM(beam_En);

      break;
    }

    case MODE::Source: {
      
      gun->SetParticleDefinition(G4Gamma::Definition());
      gun->SetParticlePosition(G4ThreeVector());
      gun->SetParticleEnergy(source_En);
      
      break;
    }

    case MODE::Full: {

      G4IonTable* table = (G4IonTable*)(G4ParticleTable::GetParticleTable()->GetIonTable());
      beam_def = table->GetIon(48,106,0.0*MeV);
      recoil_def = table->GetIon(82,208,0.0*MeV);
      
      beam_def->SetPDGStable(true);
      recoil_def->SetPDGStable(true);
      
      G4ParticleDefinition* Ex1 = table->GetIon(48,106,1.0*MeV);
      Ex1->SetPDGStable(false);
      Ex1->SetPDGLifeTime(1.0*ps);     

      Ex1->SetDecayTable(new G4DecayTable());
      Ex1->GetDecayTable()->Insert(new Gamma_Decay(Ex1,beam_def,1));

      Ex1->GetProcessManager()->SetParticleType(Ex1);
      Ex1->GetProcessManager()->AddProcess(new G4Decay(),1,-1,4);
      
      G4ParticleDefinition* Ex2 = table->GetIon(48,106,2.5*MeV);
      Ex2->SetPDGStable(false);
      Ex2->SetPDGLifeTime(1.0*ps);     

      Ex2->SetDecayTable(new G4DecayTable());
      Ex2->GetDecayTable()->Insert(new Gamma_Decay(Ex2,Ex1,1));

      Ex2->GetProcessManager()->SetParticleType(Ex2);
      Ex2->GetProcessManager()->AddProcess(new G4Decay(),1,-1,4);

      gun->SetParticleDefinition(Ex2);
      gun->SetParticleEnergy(450.0*MeV);
      gun->SetParticlePosition(G4ThreeVector());

      break;
    }
  }
  
  return;
  
}

void Primary_Generator::SetMode(G4String md) {

  if(md == "Scattering") {
    mode = MODE::Scattering;
  }
  else if(md == "Source") {
    mode = MODE::Source;
  }
  else if(md == "Full") {
    mode = MODE::Full;
  }
  
  return;
  
}

