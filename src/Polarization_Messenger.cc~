#include "Polarization_Messenger.hh"

Polarization_Messenger::Polarization_Messenger(Polarization* pol, G4bool proj) : polarization(pol) {

  G4String nuc;
  G4String path;
  if(proj) {
    nuc = "projectile";
    path = "/Polarization/Projectile/";
  }
  else {
    nuc = "recoil";
    path = "/Polarization/Recoil/";
  }
  
  G4String cmd_name;
  G4String guidance;

  //Polarization Directory
  polar_dir = new G4UIdirectory(path);  
  
  //Statistical tensor file
  cmd_name = path + "StatisticalTensors";
  sfn_cmd = new G4UIcmdWithAString(cmd_name.c_str(),this);
  sfn_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  
  guidance = "Set name of " + nuc + " statistical tensor file";
  sfn_cmd->SetGuidance(guidance.c_str());

  if(proj)
    path = "/DeorientationEffect/Projectile/";
  else
    path = "/DeorientationEffect/Recoil/";
  
  //Deorentation effect paramter directory
  deo_dir = new G4UIdirectory(path);

  //Gk coefficients
  cmd_name = path + "CalculateGk";
  cgk_cmd = new G4UIcmdWithABool(cmd_name.c_str(),this);
  cgk_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);

  guidance = "Calculate Gk coefficiencts and apply them to the " + nuc + " statistical tensors";
  cgk_cmd->SetGuidance(guidance);

  //Average J
  avj_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/AverageJ",this);
  avj_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  avj_cmd->SetGuidance("Set the average atomic spin of the projectile");

  //Gamma
  gam_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/Gamma",this);
  gam_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  gam_cmd->SetGuidance("Set the FWHM of the frequency distribution (ps^-1 ) in the projectile");

  //Lambda
  lam_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/Lambda",this);
  lam_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  lam_cmd->SetGuidance("Set the transition rate (ps^-1 ) between static and fluctuating states for the projectile");

  //TauC
  tau_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/TauC",this);
  tau_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  tau_cmd->SetGuidance("Set the correlation time (ps) of the projectile");

  //g-factor
  gfc_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/GFactor",this);
  gfc_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  gfc_cmd->SetGuidance("Set the nuclear gyromagnetic ratio (g-factor) for the projectile");

  //Field coefficient
  fld_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/FieldCoefficient",this);
  fld_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  fld_cmd->SetGuidance("Set the hyperfine field coefficient (10^8 T) for the projectile");

  //Field exponent
  exp_cmd = new G4UIcmdWithADouble("/DeorientationEffect/Projectile/FieldExponent",this);
  exp_cmd->AvailableForStates(G4ApplicationState::G4State_Idle);
  exp_cmd->SetGuidance("Set the hyperfine field exponent for the projectile");
  
}

Polarization_Messenger::~Polarization_Messenger() {

  delete polar_dir;
  delete sfn_cmd;
  
  delete cgk_cmd;
  delete deo_dir;
  delete avj_cmd;
  delete gam_cmd;
  delete lam_cmd;
  delete tau_cmd;
  delete gfc_cmd;
  delete fld_cmd;
  delete exp_cmd;
  
}

void Polarization_Messenger::SetNewValue(G4UIcommand* command, G4String newValue) {
  
  if(command == sfn_cmd) {
    polarization->SetFileName(newValue);
    G4cout << "Setting projectile statistical tensor file to " << newValue << G4endl;
  }

  ////////////Deorientation effect commands////////////
  else if(command == cgk_cmd) {
    polarization->SetCalcGk(cgk_cmd->GetNewBoolValue(newValue));
    G4cout << "Setting flag for projectile Gk calculation to " << newValue << G4endl;
  }
  
  else if(command == avj_cmd) {
    polarization->SetAverageJ(avj_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting average atomic spin of the projectle to " << newValue << G4endl;
  }

  else if(command == gam_cmd) {
    polarization->SetGamma(gam_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting the FWHM of the frequency distribution in the projectle to " << newValue
	   << " ps^-1" << G4endl;
  }

  else if(command == lam_cmd) {
    polarization->SetLambdaStar(lam_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting state fluctuation rate in the projectle to " << newValue << " ps^-1" << G4endl;
  }

  else if(command == tau_cmd) {
    polarization->SetTauC(tau_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting the correlation time in the projectle to " << newValue << " ps" << G4endl;
  }

  else if(command == gfc_cmd) {
    polarization->SetGFac(gfc_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting g-factor for the projectle to " << newValue << G4endl;
  }

  else if(command == fld_cmd) {
    polarization->SetFieldCoef(fld_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting hyperfine field coefficient in the projectle to " << newValue << "*10^8 T"
	   << G4endl;
  }

  else if(command == exp_cmd) {
    polarization->SetFieldExp(exp_cmd->GetNewDoubleValue(newValue));
    G4cout << "Setting hyperfine field exponent in the projectle to " << newValue << G4endl;
  }
  ////////////////////////////////////////////////////////////////
  
  return;
  
}
